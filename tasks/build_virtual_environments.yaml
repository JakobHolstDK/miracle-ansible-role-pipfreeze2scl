- name: Dump all variables
  action: template src=dumpall.j2 dest=/tmp/builder.ansible_dump.all

- name: build_virtual_environments | ansible create directory example
  file:
    path: /var/lib/venv/{{ project }}/venv/rpmvenv/
    state: directory
    recurse: yes

- name: build_virtual_environments | create a pip downloader
  ansible.builtin.copy:
    src: pip-downloader.py
    dest: /usr/local/bin/pip-downloader.py
    owner: root
    group: root
    mode: '0755'

- name: build_virtual_environments | Install tools on build servers
  ansible.builtin.package:
    name:  '{{ item  }}'
    state: present
  with_items:
    - "git"
    - "python3-pip"
    - "platform-python-devel"
    - "make" 
    - "autoconf" 
    - "automake" 
    - "libtool" 
    - "gcc"
    - "zlib-devel"
    - "rpm-build"
    - "tree"
    - "python3-virtualenv"
      #    - "liberasurecode-devel"


- name: 'build_virtual_environments | clone git repo ({{ project  }} - {{ version }})'
  ansible.builtin.git:
    repo: '{{ repo_url }}'
    dest: '/tmp/builder/checkout/{{ project }}/{{ version }}'
    version: '{{ version }}'

- name: " build_virtual_environments | Cleanup - Recursively remove directory ({{ project }} - {{ version }})"
  ansible.builtin.file:
    path: '/tmp/builder/virtualenvironments/{{ project }}/{{ version }}/venv'
    state: absent

- name: " build_virtual_environments | Build a virtual environment face 1 init virtual env  ({{ project }} - {{ version }})"
  pip:
    name: pip
    virtualenv: '/var/lib/openstack/venv/{{ project }}/{{ version }}/venv'
    state: latest

- name: " build_virtual_environments | Build a virtual environment face 2 : update pip ({{ project }} - {{ ostack_version }})"
  pip:
    name: ['setuptools', 'setuptools-rust', 'wheel']
    virtualenv: '/var/lib/openstack/venv/{{ ostack_component }}/{{ ostack_version }}/venv'
    state: latest

- name: " build_virtual_environments | Build a virtual environment for ({{ ostack_component }} - {{ ostack_version }})"
  pip:
    requirements: '/tmp/builder/checkout/{{ ostack_component }}/{{ ostack_version }}/requirements.txt'
    virtualenv: '/var/lib/openstack/venv/{{ ostack_component }}/{{ ostack_version }}/venv'

- name:  build_virtual_environments | Template a file to rpmvenv.json
  ansible.builtin.template:
    src: templates/rpmvenv.json.j2
    dest: '/var/lib/openstack/venv/{{ ostack_component }}/{{ ostack_version }}/rmpvenv.json'
    force: yes

- name:  build_virtual_environments | create the final requierements.txt file
  shell: /var/lib/openstack/venv/{{ ostack_component }}/{{ ostack_version }}/venv/bin/pip freeze >   /var/lib/openstack/venv/{{ ostack_component }}/{{ ostack_version }}/requirements.txt

- name: Store file into /tmp/ostack/{{ ostack_version }}/{{ ostack_component }}.requirements.txt
  ansible.builtin.fetch:
    src:  /var/lib/openstack/venv/{{ ostack_component }}/{{ ostack_version }}/requirements.txt
    dest: /tmp/ostack/{{ ostack_version }}/{{ ostack_component }}.requirements.txt
    
- name: " build_virtual_environments | Build a virtual for building packages face 1"
  pip:
    name: pip
    virtualenv: '/var/lib/openstack/venv/builder/venv'
    state: latest

- name: " build_virtual_environments | Build a virtual for building packages face 2 "
  pip:
    name: ['setuptools', 'setuptools-rust', 'wheel',  'requirements-parser', 'requests' , 'pyp2rpm'  ]
    virtualenv: '/var/lib/openstack/venv/builder/venv'
    state: latest

#Download all the sources for building rpms

- name: " build_virtual_environments |  Running downloader script to collect python sources"
  ansible.builtin.shell: /var/lib/openstack/venv/builder/venv/bin/python /usr/local/bin/pip-downloader.py
  args:
    chdir: /var/lib/openstack/venv/{{ ostack_component }}/{{ ostack_version }}

